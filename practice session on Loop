{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f888610d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banglaru', 'noida', 'chennai', 'hyddrebad', 'delhi']\n"
     ]
    }
   ],
   "source": [
    "location = ['banglaru', 'noida', 'chennai', 'hyddrebad', 'delhi']\n",
    "print(location)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "99e0d016",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "banglaru\n",
      "noida\n",
      "chennai\n",
      "hyddrebad\n",
      "delhi\n"
     ]
    }
   ],
   "source": [
    "#for loop for strings. \n",
    "location = ['banglaru', 'noida', 'chennai', 'hyddrebad', 'delhi']\n",
    "\n",
    "for city in location:\n",
    "    print(city)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e68a8d32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7000\n",
      "8000\n"
     ]
    }
   ],
   "source": [
    "#for loop for intenger.\n",
    "#nesteed if. \n",
    "salary = [2000,4000,5000,7000,8000,4500,3000]\n",
    "\n",
    "for val in salary:\n",
    "    if val>5500:\n",
    "        print(val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "617adcd1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35 pass\n",
      "67 first class\n",
      "78 Distinction\n",
      "79 Distinction\n",
      "12 fail-better luck next time\n",
      "34 fail-better luck next time\n",
      "67 first class\n",
      "54 Second class\n",
      "89 Distinction\n"
     ]
    }
   ],
   "source": [
    "#let us consider we have list on n of studnets in such case to display the result we use for loop.\n",
    "# see how we are using here nested loop. (that is loop inside loop)\n",
    "student_scores = [35,67,78,79,12,34,67,54,89] \n",
    "\n",
    "for marks in student_scores:\n",
    "    if marks>60:\n",
    "        if marks>70:\n",
    "            print(marks, 'Distinction')\n",
    "        else:\n",
    "            print(marks, 'first class')\n",
    "    elif marks>50 and marks<=60:\n",
    "        print(marks, 'Second class')\n",
    "    elif marks>=35:\n",
    "        print(marks, 'pass')\n",
    "    else:\n",
    "        print(marks, 'fail-better luck next time')\n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dd4fcc23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[7000, 8000]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#List comprension. \n",
    "salary = [2000,4000,5000,7000,8000,4500,3000]\n",
    "sal = [val for val in salary  if val>5500]\n",
    "sal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f3fe15ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "multipliation table for - 2\n",
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n",
      "/n\n",
      "multipliation table for - 3\n",
      "3\n",
      "6\n",
      "9\n",
      "12\n",
      "15\n",
      "18\n",
      "21\n",
      "24\n",
      "27\n",
      "30\n",
      "/n\n",
      "multipliation table for - 4\n",
      "4\n",
      "8\n",
      "12\n",
      "16\n",
      "20\n",
      "24\n",
      "28\n",
      "32\n",
      "36\n",
      "40\n",
      "/n\n"
     ]
    }
   ],
   "source": [
    "#how to use for loop with else. \n",
    "#multiplication table is a variable we can put anything in replace of it. \n",
    "for num in range (2,5):\n",
    "    print ('multipliation table for -', num)\n",
    "    for i in range (1,11):\n",
    "        print(num * i)\n",
    "        if i==10:\n",
    "            print('/n')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "77e6d9c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "multiplication table - 2\n",
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n",
      "/n\n",
      "multiplication table - 3\n",
      "3\n",
      "6\n",
      "9\n",
      "12\n",
      "15\n",
      "18\n",
      "21\n",
      "24\n",
      "27\n",
      "30\n",
      "/n\n",
      "multiplication table - 4\n",
      "4\n",
      "8\n",
      "12\n",
      "16\n",
      "20\n",
      "24\n",
      "28\n",
      "32\n",
      "36\n",
      "40\n",
      "/n\n",
      "******************************\n",
      "End of multiplication table\n",
      "******************************\n"
     ]
    }
   ],
   "source": [
    "for num in range (2,5):\n",
    "    print ('multiplication table -', num)\n",
    "    for i in range (1,11):\n",
    "        print (i * num)\n",
    "        if i==10:\n",
    "            print ('/n') \n",
    "else:\n",
    "    print ('*' *30)\n",
    "    print('End of multiplication table')\n",
    "    print ('*' *30)\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "dbcf1306",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 Data Trained\n",
      "2 Data Trained\n",
      "3 Data Trained\n",
      "4 Data Trained\n",
      "5 Data Trained\n",
      "6 Data Trained\n",
      "7 Data Trained\n",
      "8 Data Trained\n",
      "9 Data Trained\n",
      "10 Data Trained\n"
     ]
    }
   ],
   "source": [
    "#simple while loop. \n",
    "#we can not count no of times data here we used while loop. \n",
    "\n",
    "i = 0\n",
    "while i<10:\n",
    "    i = i + 1\n",
    "    print(i, 'Data Trained')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "7c91929d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time.struct_time(tm_year=2022, tm_mon=8, tm_mday=15, tm_hour=18, tm_min=37, tm_sec=10, tm_wday=0, tm_yday=227, tm_isdst=0)\n"
     ]
    }
   ],
   "source": [
    "# how to cheeck local time. \n",
    "import time\n",
    "results = time.localtime()\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d985ccf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "results = time.localtime()\n",
    "print(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11ca6e4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "while True:\n",
    "    results = time.localtime()\n",
    "    if results.tm_hour==18 and results.tm_min==54\n",
    "    print('wake up buddy')\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfba7506",
   "metadata": {},
   "outputs": [],
   "source": [
    "#for loop = if you know how many times you want to execute the code then use for the loop.\n",
    "#while loop = if you dont know how many times you want to execute the code then use while loop."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
